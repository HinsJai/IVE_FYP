// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: proto.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnalysisClient is the client API for Analysis service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnalysisClient interface {
	Analysis(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Analysis_AnalysisClient, error)
	GetImage(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Analysis_GetImageClient, error)
}

type analysisClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalysisClient(cc grpc.ClientConnInterface) AnalysisClient {
	return &analysisClient{cc}
}

func (c *analysisClient) Analysis(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Analysis_AnalysisClient, error) {
	stream, err := c.cc.NewStream(ctx, &Analysis_ServiceDesc.Streams[0], "/Analysis/analysis", opts...)
	if err != nil {
		return nil, err
	}
	x := &analysisAnalysisClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Analysis_AnalysisClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type analysisAnalysisClient struct {
	grpc.ClientStream
}

func (x *analysisAnalysisClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *analysisClient) GetImage(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Analysis_GetImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &Analysis_ServiceDesc.Streams[1], "/Analysis/get_image", opts...)
	if err != nil {
		return nil, err
	}
	x := &analysisGetImageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Analysis_GetImageClient interface {
	Recv() (*Image, error)
	grpc.ClientStream
}

type analysisGetImageClient struct {
	grpc.ClientStream
}

func (x *analysisGetImageClient) Recv() (*Image, error) {
	m := new(Image)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AnalysisServer is the server API for Analysis service.
// All implementations must embed UnimplementedAnalysisServer
// for forward compatibility
type AnalysisServer interface {
	Analysis(*Empty, Analysis_AnalysisServer) error
	GetImage(*Empty, Analysis_GetImageServer) error
	mustEmbedUnimplementedAnalysisServer()
}

// UnimplementedAnalysisServer must be embedded to have forward compatible implementations.
type UnimplementedAnalysisServer struct {
}

func (UnimplementedAnalysisServer) Analysis(*Empty, Analysis_AnalysisServer) error {
	return status.Errorf(codes.Unimplemented, "method Analysis not implemented")
}
func (UnimplementedAnalysisServer) GetImage(*Empty, Analysis_GetImageServer) error {
	return status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}
func (UnimplementedAnalysisServer) mustEmbedUnimplementedAnalysisServer() {}

// UnsafeAnalysisServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalysisServer will
// result in compilation errors.
type UnsafeAnalysisServer interface {
	mustEmbedUnimplementedAnalysisServer()
}

func RegisterAnalysisServer(s grpc.ServiceRegistrar, srv AnalysisServer) {
	s.RegisterService(&Analysis_ServiceDesc, srv)
}

func _Analysis_Analysis_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AnalysisServer).Analysis(m, &analysisAnalysisServer{stream})
}

type Analysis_AnalysisServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type analysisAnalysisServer struct {
	grpc.ServerStream
}

func (x *analysisAnalysisServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _Analysis_GetImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AnalysisServer).GetImage(m, &analysisGetImageServer{stream})
}

type Analysis_GetImageServer interface {
	Send(*Image) error
	grpc.ServerStream
}

type analysisGetImageServer struct {
	grpc.ServerStream
}

func (x *analysisGetImageServer) Send(m *Image) error {
	return x.ServerStream.SendMsg(m)
}

// Analysis_ServiceDesc is the grpc.ServiceDesc for Analysis service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Analysis_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Analysis",
	HandlerType: (*AnalysisServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "analysis",
			Handler:       _Analysis_Analysis_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "get_image",
			Handler:       _Analysis_GetImage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto.proto",
}

// TimAnalysisClient is the client API for TimAnalysis service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimAnalysisClient interface {
	Analysis(ctx context.Context, in *Empty, opts ...grpc.CallOption) (TimAnalysis_AnalysisClient, error)
	GetImage(ctx context.Context, in *Empty, opts ...grpc.CallOption) (TimAnalysis_GetImageClient, error)
}

type timAnalysisClient struct {
	cc grpc.ClientConnInterface
}

func NewTimAnalysisClient(cc grpc.ClientConnInterface) TimAnalysisClient {
	return &timAnalysisClient{cc}
}

func (c *timAnalysisClient) Analysis(ctx context.Context, in *Empty, opts ...grpc.CallOption) (TimAnalysis_AnalysisClient, error) {
	stream, err := c.cc.NewStream(ctx, &TimAnalysis_ServiceDesc.Streams[0], "/TimAnalysis/analysis", opts...)
	if err != nil {
		return nil, err
	}
	x := &timAnalysisAnalysisClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TimAnalysis_AnalysisClient interface {
	Recv() (*TimResponse, error)
	grpc.ClientStream
}

type timAnalysisAnalysisClient struct {
	grpc.ClientStream
}

func (x *timAnalysisAnalysisClient) Recv() (*TimResponse, error) {
	m := new(TimResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *timAnalysisClient) GetImage(ctx context.Context, in *Empty, opts ...grpc.CallOption) (TimAnalysis_GetImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &TimAnalysis_ServiceDesc.Streams[1], "/TimAnalysis/get_image", opts...)
	if err != nil {
		return nil, err
	}
	x := &timAnalysisGetImageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TimAnalysis_GetImageClient interface {
	Recv() (*Image, error)
	grpc.ClientStream
}

type timAnalysisGetImageClient struct {
	grpc.ClientStream
}

func (x *timAnalysisGetImageClient) Recv() (*Image, error) {
	m := new(Image)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TimAnalysisServer is the server API for TimAnalysis service.
// All implementations must embed UnimplementedTimAnalysisServer
// for forward compatibility
type TimAnalysisServer interface {
	Analysis(*Empty, TimAnalysis_AnalysisServer) error
	GetImage(*Empty, TimAnalysis_GetImageServer) error
	mustEmbedUnimplementedTimAnalysisServer()
}

// UnimplementedTimAnalysisServer must be embedded to have forward compatible implementations.
type UnimplementedTimAnalysisServer struct {
}

func (UnimplementedTimAnalysisServer) Analysis(*Empty, TimAnalysis_AnalysisServer) error {
	return status.Errorf(codes.Unimplemented, "method Analysis not implemented")
}
func (UnimplementedTimAnalysisServer) GetImage(*Empty, TimAnalysis_GetImageServer) error {
	return status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}
func (UnimplementedTimAnalysisServer) mustEmbedUnimplementedTimAnalysisServer() {}

// UnsafeTimAnalysisServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimAnalysisServer will
// result in compilation errors.
type UnsafeTimAnalysisServer interface {
	mustEmbedUnimplementedTimAnalysisServer()
}

func RegisterTimAnalysisServer(s grpc.ServiceRegistrar, srv TimAnalysisServer) {
	s.RegisterService(&TimAnalysis_ServiceDesc, srv)
}

func _TimAnalysis_Analysis_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TimAnalysisServer).Analysis(m, &timAnalysisAnalysisServer{stream})
}

type TimAnalysis_AnalysisServer interface {
	Send(*TimResponse) error
	grpc.ServerStream
}

type timAnalysisAnalysisServer struct {
	grpc.ServerStream
}

func (x *timAnalysisAnalysisServer) Send(m *TimResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TimAnalysis_GetImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TimAnalysisServer).GetImage(m, &timAnalysisGetImageServer{stream})
}

type TimAnalysis_GetImageServer interface {
	Send(*Image) error
	grpc.ServerStream
}

type timAnalysisGetImageServer struct {
	grpc.ServerStream
}

func (x *timAnalysisGetImageServer) Send(m *Image) error {
	return x.ServerStream.SendMsg(m)
}

// TimAnalysis_ServiceDesc is the grpc.ServiceDesc for TimAnalysis service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TimAnalysis_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TimAnalysis",
	HandlerType: (*TimAnalysisServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "analysis",
			Handler:       _TimAnalysis_Analysis_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "get_image",
			Handler:       _TimAnalysis_GetImage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto.proto",
}

// DiscordLogClient is the client API for DiscordLog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiscordLogClient interface {
	Log(ctx context.Context, in *LogResponse, opts ...grpc.CallOption) (*Empty, error)
}

type discordLogClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscordLogClient(cc grpc.ClientConnInterface) DiscordLogClient {
	return &discordLogClient{cc}
}

func (c *discordLogClient) Log(ctx context.Context, in *LogResponse, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/DiscordLog/log", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscordLogServer is the server API for DiscordLog service.
// All implementations must embed UnimplementedDiscordLogServer
// for forward compatibility
type DiscordLogServer interface {
	Log(context.Context, *LogResponse) (*Empty, error)
	mustEmbedUnimplementedDiscordLogServer()
}

// UnimplementedDiscordLogServer must be embedded to have forward compatible implementations.
type UnimplementedDiscordLogServer struct {
}

func (UnimplementedDiscordLogServer) Log(context.Context, *LogResponse) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log not implemented")
}
func (UnimplementedDiscordLogServer) mustEmbedUnimplementedDiscordLogServer() {}

// UnsafeDiscordLogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiscordLogServer will
// result in compilation errors.
type UnsafeDiscordLogServer interface {
	mustEmbedUnimplementedDiscordLogServer()
}

func RegisterDiscordLogServer(s grpc.ServiceRegistrar, srv DiscordLogServer) {
	s.RegisterService(&DiscordLog_ServiceDesc, srv)
}

func _DiscordLog_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordLogServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DiscordLog/log",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordLogServer).Log(ctx, req.(*LogResponse))
	}
	return interceptor(ctx, in, info, handler)
}

// DiscordLog_ServiceDesc is the grpc.ServiceDesc for DiscordLog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiscordLog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DiscordLog",
	HandlerType: (*DiscordLogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "log",
			Handler:    _DiscordLog_Log_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto.proto",
}
